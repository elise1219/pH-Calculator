import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

# class structure for acids
class Acid:
    def __init__ (self, name, pKa_list, mw):
        self.name = name
        self.pKa_list = pKa_list
        self.n_protons = len(pKa_list)
        self.mw = mw

# pH calculations
def pH_monoprotic(acid_conc, pKa):
    Ka = 10 ** (-pKa) # conversion of pKa to Ka
    # coefficients of quadratic equation to solve for concentration of hydrogen ions
    a = 1 
    b = Ka # acid dissociation constant
    c = -Ka * acid_conc # acid dissociation constant multiplied by initial acid concentration
    discriminant = b**2 - 4*a*c # quadratic discriminant
    H = (-b +np.sqrt(discriminant))/(2*a) # calculates H+ concentration
    if H<=0:
        return np.nan
    return -np.log10(H) # calculates and returns pH

def pH_diprotic(acid_conc, pKa_list):
    Ka1, Ka2 = [10**(-pKa) for pKa in pKa_list] # converts pKa to Ka values
    def electroneutrality(H): # used in a root finder to solve for hydrogen concentration
        denominator = H**2 + Ka1*H + Ka1*Ka2 
        H2A = H**2 / denominator
        HA_ = Ka1*H / denominator
        A2_ = Ka1*Ka2 / denominator
        return H - 1e-14/H - acid_conc*(HA_ + 2*A2_)
    H_found = fsolve(electroneutrality, x0 = [1e-3])[0]
    return -np.log10(H_found)

def pH_triprotic(acid_conc, pKa_list):
    Ka1, Ka2, Ka3 = [10**(-pKa) for pKa in pKa_list] # converts pKa to Ka values
    def electroneutrality(H):
        denominator = (H**3 + Ka1*H**2 + Ka1*Ka2*H + Ka1*Ka2*Ka3)
        AH3 = H**3 / denominator
        AH2 = Ka1*H**2 / denominator
        AH1 = Ka1*Ka2*H / denominator
        A = Ka1*Ka2*Ka3 / denominator
        return H - 1e-14/H - acid_conc*(AH2 + 2*AH1 + 3*A)
    H_found = fsolve(electroneutrality, x0 = [1e-3])[0]
    return -np.log10(H_found)

# User input for pKa
acid_name = input('Enter acid name: ')
pka_str = input('Enter pKa values, separated by commas (e.g. 3.13, 5.63.6.97): ')
pka_list = [float(x.strip()) for x in pka_str.split(',') if x.strip()]
mw = float(input('Enter molecular weight (g/mol): '))
# If you want to include molecular weight (or keep it 0)

acid = Acid(acid_name, pka_list, mw)

# pH calculation loop
Conc_values_w_w = np.linspace(0,100,201) # Prepare x axis: 0% to 100% w/w, 201 points (step size of 0.5%)
Conc_values_molarity = (Conc_values_w_w / 100) * 1000 / acid.mw # Convert % w/w to molarity (mol/L). Assume 1 L solution ~ 1000 g (for dilute solutions)
pH_results = []

for acid_conc in Conc_values_molarity:
    if acid.n_protons == 1:
        pH = pH_monoprotic(acid_conc, acid.pKa_list[0])
    elif acid.n_protons == 2: 
        pH = pH_diprotic(acid_conc, acid.pKa_list)
    elif acid.n_protons == 3:
        pH = pH_triprotic(acid_conc, acid.pKa_list)
    else:
        pH = np.nan
        
    pH_results.append(pH)

Conc_values_w_W = Conc_values_molarity* acid.mw * 0.1

plt.figure(figsize = (8,5))
plt.plot(Conc_values_w_w, pH_results, label=f'theoretical pH ({acid.name})', color='navy')
plt.xlabel('Acid Concentration (% w/w)')
plt.ylabel('pH')
plt.title(f'pH vs Acid Concentration for {acid.name}')
plt.xlim(0,100)
plt.legend()
plt.grid(True)
plt.show()
