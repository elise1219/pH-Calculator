import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from scipy.optimize import fsolve

# --- Acid class and pH functions ---
class Acid:
    def __init__ (self, name, pKa_list, mw):
        self.name = name
        self.pKa_list = pKa_list
        self.n_protons = len(pKa_list)
        self.mw = mw

def pH_monoprotic(acid_conc, pKa):
    Ka = 10 ** (-pKa)
    a = 1
    b = Ka
    c = -Ka * acid_conc
    discriminant = b**2 - 4*a*c
    H = (-b + np.sqrt(discriminant)) / (2*a)
    if H<=0:
        return np.nan
    return -np.log10(H)

def pH_diprotic(acid_conc, pKa_list):
    Ka1, Ka2 = [10**(-pKa) for pKa in pKa_list]
    def electroneutrality(H):
        denominator = H**2 + Ka1*H + Ka1*Ka2
        H2A = H**2 / denominator
        HA_ = Ka1*H / denominator
        A2_ = Ka1*Ka2 / denominator
        return H - 1e-14/H - acid_conc*(HA_ + 2*A2_)
    H_found = fsolve(electroneutrality, x0 = [1e-3])[0]
    if H_found<=0:
        return np.nan
    return -np.log10(H_found)

def pH_triprotic(acid_conc, pKa_list):
    Ka1, Ka2, Ka3 = [10**(-pKa) for pKa in pKa_list]
    def electroneutrality(H):
        denominator = (H**3 + Ka1*H**2 + Ka1*Ka2*H + Ka1*Ka2*Ka3)
        AH3 = H**3 / denominator
        AH2 = Ka1*H**2 / denominator
        AH1 = Ka1*Ka2*H / denominator
        A = Ka1*Ka2*Ka3 / denominator
        return H - 1e-14/H - acid_conc*(AH2 + 2*AH1 + 3*A)
    H_found = fsolve(electroneutrality, x0 = [1e-3])[0]
    if H_found<=0:
        return np.nan
    return -np.log10(H_found)

# --- Streamlit App ---
st.title("Acid pH Visualizer")
tab1, tab2, tab3, tab4 = st.tabs(['Welcome', 'Acid pH Graph Calculator', 'Disclaimer','Source Code'])

with tab1:
    st.subheader('Getting Started')
    st.text('This site estimates graphically the pH of an acid based on its concentration in a solution composed of the acid and deionized water. These calculations take into accound molecular weight and pKa values of the acid. This is an estimation tool based on calculation not experimental data. To learn more visit our disclaimer page.')
    st.subheader('What is pH?')
    st.text('pH is the acidity or basicity of a solution, determined by measuring the concentration of hydrogen ions in a solution.')
    st.text('Consider these two household items: vinegar and hand soap. Vinegar has a pH of around 3 which is quite acidic and dish soap has a pH of around 10. Substances with a pH similar to vinegar react with some metals and carbonates and produce bubbles of gas. Substances with a pH similar to dish soap are able to cut through grease and oil which allows it to be effective for cleaning. This shows how much pH impacts the behavior of a substance.')
    st.text('For our calculations we find pH based on pKa values by using a quadratic formula to calculate the [H+] concentration and a derivation of the Henderson-Hasselbalch equation to calculate pH.')
    st.text('Henderson-Hasselbalch Equation:')
    st.latex(r"""\mathrm{pH} = \mathrm{p}K_\mathrm{a} + \log_{10} \left( \frac{[\mathrm{A}^-]}{[\mathrm{HA}]} \right)""")
    st.text('[HA]: acid concentration\n[A-]: conjugate base concentration')

with tab2:
    st.subheader('Acid pH Graph Calculator')
    st.markdown("Enter your acid's properties and plot theoretical pH vs. concentration (w/w).")
    with st.form('Acid form'): 
        acid_name = st.text_input('Acid name (e.g. Citric Acid):')
        pka_str = st.text_input('pKa values (comma-separated, e.g. 3.13, 4.76, 6.40):')
        mw = st.number_input('Molecular weight (g/mol):', min_value=0.0)
        plot_button = st.form_submit_button('Plot pH Curve')
    
    if plot_button:
        try:
            pka_list = [float(x.strip()) for x in pka_str.split(',') if x.strip()]
            acid = Acid(acid_name, pka_list, mw)
            Conc_values_w_w = np.linspace(0,100,201)
            Conc_values_molarity = (Conc_values_w_w / 100) * 1000 / acid.mw
            pH_results = []
            for acid_conc in Conc_values_molarity:
                if acid.n_protons == 1:
                    pH = pH_monoprotic(acid_conc, acid.pKa_list[0])
                elif acid.n_protons == 2:
                    pH = pH_diprotic(acid_conc, acid.pKa_list)
                elif acid.n_protons == 3:
                    pH = pH_triprotic(acid_conc, acid.pKa_list)
                else:
                    pH = np.nan
                pH_results.append(pH)
    
            fig, ax = plt.subplots(figsize=(7,4))
            ax.plot(Conc_values_w_w, pH_results, label=f'Theoretical pH of ({acid.name})', color='black')
            ax.set_xlabel('Acid Concentration (% w/w)')
            ax.set_ylabel('pH')
            ax.set_title(f'pH vs Acid Concentration for {acid.name}')
            ax.set_xlim(0,100)
            ax.legend()
            ax.grid(True)
            st.pyplot(fig,clear_figure=True)
            st.success('Plot generated successfully!\nRight-click the graph to save as an image.')
        except Exception as e:
            st.error(f"Error: {e}")


# Disclaimer
with tab3:
    st.subheader('Disclaimer')
    st.markdown("This program provides theoretical predictions of solution pH based on entered acid dissociation constants (pKa values), molecular weights, and concentrations. "
            "The calculations assume ideal, dilute aqueous solutions at 25°C, without corrections for ionic strength, precise density, temperature variation, carbon dioxide absorption, or other real-world factors. "
            "Actual pH values measured in laboratory or industrial settings may differ due to these and other variables. "
            "\n\nThis tool is intended for educational and illustrative purposes only and should not be relied upon for safety-critical, regulatory, or process control decisions without independent validation and laboratory measurement. "
            "\n\nUse at your own risk."
        )

# Source Code
with tab4:
    st.subheader('Source Code')
    code='''import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt

# Acid class holds the acid properties: name, pKa values, and molecular weight
class Acid:
    def __init__(self, name, pKa_list, mw):
        self.name = name
        self.pKa_list = pKa_list  # List of all pKa values (e.g. [3.13, 4.76, 6.40])
        self.n_protons = len(pKa_list)
        self.mw = mw  # Molecular weight in g/mol

# Computes pH for monoprotic acids: HA ↔ H⁺ + A⁻
def pH_monoprotic(acid_conc, pKa):
    Ka = 10 ** (-pKa)
    a = 1
    b = Ka
    c = -Ka * acid_conc
    discriminant = b**2 - 4 * a * c
    if discriminant < 0:
        return np.nan
    H = (-b + np.sqrt(discriminant)) / (2 * a)
    if H <= 0:
        return np.nan
    return -np.log10(H)

# Computes pH for diprotic acids: H2A ↔ HA⁻ ↔ A²⁻
def pH_diprotic(acid_conc, pKa_list):
    Ka1, Ka2 = [10 ** (-pKa) for pKa in pKa_list]
    def electroneutrality(H):
        denominator = H**2 + Ka1 * H + Ka1 * Ka2
        H2A = H**2 / denominator
        HA_minus = Ka1 * H / denominator
        A2_minus = Ka1 * Ka2 / denominator
        return H - 1e-14 / H - acid_conc * (HA_minus + 2 * A2_minus)
    H_found = fsolve(electroneutrality, x0=[1e-3])[0]
    if H_found <= 0:
        return np.nan
    return -np.log10(H_found)

# Computes pH for triprotic acids: H3A ↔ H2A⁻ ↔ HA²⁻ ↔ A³⁻
def pH_triprotic(acid_conc, pKa_list):
    Ka1, Ka2, Ka3 = [10 ** (-pKa) for pKa in pKa_list]
    def electroneutrality(H):
        denominator = H**3 + Ka1 * H**2 + Ka1 * Ka2 * H + Ka1 * Ka2 * Ka3
        H3A = H**3 / denominator
        H2A = Ka1 * H**2 / denominator
        HA = Ka1 * Ka2 * H / denominator
        A = Ka1 * Ka2 * Ka3 / denominator
        return H - 1e-14 / H - acid_conc * (H2A + 2 * HA + 3 * A)
    H_found = fsolve(electroneutrality, x0=[1e-3])[0]
    if H_found <= 0:
        return np.nan
    return -np.log10(H_found)

# Generate and plot the pH curve for a given acid
def plot_pH_curve(acid_name, pKa_list, mw):
    conc_w_w = np.linspace(0, 100, 201)  # Concentration from 0 to 100% w/w
    conc_molarity = (conc_w_w / 100) * 1000 / mw  # Convert % w/w to mol/L
    pH_results = []
    n_protons = len(pKa_list)
    for acid_conc in conc_molarity:
        if n_protons == 1:
            pH = pH_monoprotic(acid_conc, pKa_list[0])
        elif n_protons == 2:
            pH = pH_diprotic(acid_conc, pKa_list)
        elif n_protons == 3:
            pH = pH_triprotic(acid_conc, pKa_list)
        else:
            pH = np.nan
        pH_results.append(pH)
    fig, ax = plt.subplots(figsize=(7,4))
    ax.plot(conc_w_w, pH_results, color='black')
    ax.set_xlabel('Acid Concentration (% w/w)')
    ax.set_ylabel('pH')
    ax.set_title(f'pH vs Acid Concentration for {acid_name}')
    ax.set_xlim(0, 100)
    ax.grid(True)
    return fig'''
    st.code(code)
